// File: /api/server.js
// This is the Node.js backend, adapted to run as a Vercel Serverless Function.

const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const path = require('path');

const app = express();

// --- Middleware Setup ---
app.use(cors());
app.use(bodyParser.json());

// Serve the static files from the React app build directory
app.use(express.static(path.join(__dirname, '..', 'build')));


// --- In-Memory Database (for simulation) ---
const generateUUID = () => 'a' + Math.random().toString(36).substring(2, 15);
let users = { "user@example.com": { password: "password", enrolled: true, profileId: generateUUID() } };

// --- API Endpoints ---
app.post('/api/login', (req, res) => {
    const { email, password } = req.body;
    const user = users[email];
    if (user && user.password === password) {
        res.status(200).json({ status: user.enrolled ? 'authenticated' : 'onboarding', profileId: user.profileId });
    } else {
        res.status(401).json({ error: 'Invalid credentials.' });
    }
});

app.post('/api/signup', (req, res) => {
    const { email, password } = req.body;
    if (users[email]) {
        return res.status(409).json({ error: 'User already exists.' });
    }
    users[email] = { password, enrolled: false, profileId: null };
    res.status(201).json({ message: 'User created. Proceed to onboarding.' });
});

app.post('/api/enroll', (req, res) => {
    const { email } = req.body;
    if (!users[email]) {
        return res.status(404).json({ error: "User not found." });
    }
    const newProfileId = generateUUID();
    users[email] = { ...users[email], enrolled: true, profileId: newProfileId };
    console.log(`[FHE Simulation] Enrolled ${email} with ID ${newProfileId}`);
    res.status(200).json({ profileId: newProfileId });
});

const MOCK_SOURCES = [ { name: 'YouTube'}, { name: 'TikTok'}, { name: 'Facebook'}];
const createMockIncident = () => ({ id: generateUUID(), sourceName: MOCK_SOURCES[Math.floor(Math.random() * MOCK_SOURCES.length)].name, timestamp: new Date(), faceMatch: (Math.random() * (99.8 - 85) + 85), deepfakeScore: (Math.random() * (99.9 - 70) + 70), isNew: true });

let incidents = [];
setInterval(() => {
    // Only generate incidents if there's at least one enrolled user
    if (Object.values(users).some(u => u.enrolled)) {
        incidents.unshift(createMockIncident());
        if (incidents.length > 20) incidents.pop(); // Keep the list from growing indefinitely
    }
}, 15000);

app.get('/api/incidents', (req, res) => {
    res.status(200).json(incidents);
});

// All other GET requests not handled before will return the React app
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, '..', 'build', 'index.html'));
});

// Export the app for Vercel
module.exports = app;
