// File: /src/App.js
// The frontend is now updated to use relative API paths (e.g., /api/login)
// which Vercel will correctly route to the serverless function.
import React, { useState, useEffect, useCallback, createContext, useContext, useRef } from 'react';
import { ShieldCheck, Video, Mic, AlertTriangle, Sun, Moon, Database, Cpu, Bot, Fingerprint, Info, Lock, Mail, User, Key, Bell, X, ChevronUp, ChevronDown, FileText, Send, Clock } from 'lucide-react';

const AppContext = createContext();

// --- API Helper (uses relative paths) ---
const apiFetch = async (endpoint, options = {}) => {
    try {
        const response = await fetch(endpoint, { // No BACKEND_URL needed
            headers: { 'Content-Type': 'application/json' },
            ...options,
        });
        const data = await response.json();
        if (!response.ok) throw new Error(data.error || 'API request failed');
        return data;
    } catch (error) {
        console.error(`API Error on ${endpoint}:`, error.message);
        throw error;
    }
};

// --- Main App Component & Context Provider ---
export default function App() {
    const [authState, setAuthState] = useState({ status: 'unauthenticated', profileId: null, email: null });
    const [incidents, setIncidents] = useState([]);
    const [notifications, setNotifications] = useState([]);
    
    const login = async (email, password) => {
        const data = await apiFetch('/api/login', { method: 'POST', body: JSON.stringify({ email, password }) });
        setAuthState({ status: data.status, profileId: data.profileId, email });
    };
    const signup = async (email, password) => {
        await apiFetch('/api/signup', { method: 'POST', body: JSON.stringify({ email, password }) });
        setAuthState({ status: 'onboarding', email });
    };
    const enroll = async (email) => {
        const data = await apiFetch('/api/enroll', { method: 'POST', body: JSON.stringify({ email }) });
        setAuthState({ status: 'authenticated', profileId: data.profileId, email });
    };
    const logout = () => { setAuthState({ status: 'unauthenticated' }); setIncidents([]); setNotifications([]); };

    const markIncidentAsRead = useCallback((id) => setIncidents(prev => prev.map(inc => (inc.id === id ? { ...inc, isNew: false } : inc))), []);
    const dismissNotification = useCallback((id) => setNotifications(prev => prev.filter(n => n.id !== id)), []);
    
    const contextValue = { authState, incidents, notifications, login, signup, enroll, logout, setIncidents, setNotifications, markIncidentAsRead, dismissNotification };
    
    const renderContent = () => {
        switch (authState.status) {
            case 'unauthenticated': return <AuthPage />;
            case 'onboarding': return <OnboardingFlow />;
            case 'authenticated': return <AuthenticatedApp />;
            default: return <AuthPage />;
        }
    };
    return (<AppContext.Provider value={contextValue}><div className="dark"><div className="bg-gray-100 dark:bg-slate-900 text-gray-800 dark:text-slate-200 min-h-screen">{renderContent()}</div></div></AppContext.Provider>);
}

// --- Other Components (unchanged logic, only API path matters) ---
// For brevity, the components are included without repeated comments. They are functionally identical to the stable standalone version.
function AuthenticatedApp() { const { setIncidents, setNotifications } = useContext(AppContext); const incidentIds = useRef(new Set()); useEffect(() => { const fetchIncidents = async () => { try { const fetchedIncidents = await apiFetch('/api/incidents'); const newIncidents = fetchedIncidents.filter(fi => !incidentIds.current.has(fi.id)); if (newIncidents.length > 0) { newIncidents.forEach(inc => incidentIds.current.add(inc.id)); setIncidents(prev => [...newIncidents, ...prev].sort((a,b) => new Date(b.timestamp) - new Date(a.timestamp))); setNotifications(prev => [...newIncidents.map(n=>({...n, isNewToast: true})), ...prev]); } } catch (error) { console.error("Incident fetch failed.", error); } }; fetchIncidents(); const intervalId = setInterval(fetchIncidents, 5000); return () => clearInterval(intervalId); }, [setIncidents, setNotifications]); return <Dashboard />; }
const AuthPage = () => { const { login, signup } = useContext(AppContext); const [isLogin, setIsLogin] = useState(true); const [email, setEmail] = useState('user@example.com'); const [password, setPassword] = useState('password'); const [error, setError] = useState(''); const [isLoading, setIsLoading] = useState(false); const handleSubmit = async (e) => { e.preventDefault(); setError(''); setIsLoading(true); try { if (isLogin) { await login(email, password); } else { await signup(email, password); } } catch (err) { setError(err.message); } finally { setIsLoading(false); } }; return (<div className="flex items-center justify-center min-h-screen"><div className="w-full max-w-md p-8 space-y-8 bg-white dark:bg-slate-800 rounded-2xl shadow-2xl"><div className="text-center"><ShieldCheck className="mx-auto h-12 w-12 text-cyan-500" /><h2 className="mt-6 text-3xl font-bold text-gray-900 dark:text-white">HintSight.AI</h2></div><form className="mt-8 space-y-6" onSubmit={handleSubmit}><InputField icon={<Mail />} type="email" placeholder="Email Address" value={email} onChange={e => setEmail(e.target.value)} /><InputField icon={<Key />} type="password" placeholder="Password" value={password} onChange={e => setPassword(e.target.value)} />{error && <p className="text-sm text-red-500 text-center">{error}</p>}<button type="submit" disabled={isLoading} className="w-full py-3 px-4 text-sm font-semibold rounded-md text-white bg-cyan-600 hover:bg-cyan-700 disabled:bg-gray-400">{isLoading ? 'Processing...' : (isLogin ? 'Log In' : 'Create Account')}</button></form><p className="text-center text-sm"><button onClick={() => { setIsLogin(!isLogin); setError(''); }} className="font-medium text-cyan-600 hover:text-cyan-500">{isLogin ? "Don't have an account? Sign up" : "Already have an account? Log in"}</button></p></div></div>);};
const InputField = ({ icon, type, placeholder, value, onChange }) => (<div className="relative"><div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">{React.cloneElement(icon, { className: "h-5 w-5 text-gray-400" })}</div><input type={type} placeholder={placeholder} value={value} onChange={onChange} required className="w-full pl-10 pr-4 py-2 border border-gray-300 dark:border-slate-600 rounded-md bg-gray-50 dark:bg-slate-700 focus:ring-2 focus:ring-cyan-500 focus:border-cyan-500 outline-none" /></div>);
const OnboardingFlow = () => { const { authState, enroll } = useContext(AppContext); const { email } = authState; const [currentStep, setCurrentStep] = useState(1); const [faceFile, setFaceFile] = useState(null); const [voiceFile, setVoiceFile] = useState(null); const [isLoading, setIsLoading] = useState(false); const handleEnrollment = async () => { setIsLoading(true); await enroll(email).catch(() => setIsLoading(false)); }; return (<div className="flex flex-col items-center justify-center min-h-screen bg-gray-100 dark:bg-slate-900 p-4"><div className="w-full max-w-2xl p-8 bg-white dark:bg-slate-800 rounded-xl shadow-2xl"><ol className="flex items-center w-full max-w-lg mx-auto mb-8">{[1, 2, 3].map(s => (<li key={s} className={`flex w-full items-center ${s < 3 ? "after:content-[''] after:w-full after:h-1 after:border-b after:border-4 after:inline-block" : ''} ${s <= currentStep ? 'text-cyan-500 after:border-cyan-500' : 'text-gray-500 after:border-gray-200 dark:after:border-slate-700'}`}><span className={`flex items-center justify-center w-10 h-10 rounded-full lg:h-12 lg:w-12 shrink-0 ${s <= currentStep ? 'bg-cyan-100 dark:bg-cyan-800' : 'bg-gray-100 dark:bg-slate-700'}`}>{s < currentStep ? <ShieldCheck className="w-6 h-6" /> : <span className="font-bold">{s}</span>}</span></li>))}</ol>{currentStep === 1 && (<><h2 className="text-2xl font-bold text-center mb-2">Step 1: Submit Biometrics</h2><div className="grid grid-cols-1 md:grid-cols-2 gap-6 my-6"><FileInput icon={<Video/>} label="Face Photo" file={faceFile} onFileChange={setFaceFile} /><FileInput icon={<Mic/>} label="Voice Sample" file={voiceFile} onFileChange={setVoiceFile} /></div><button onClick={() => setCurrentStep(2)} disabled={!faceFile || !voiceFile} className="w-full py-3 bg-cyan-600 text-white font-semibold rounded-lg shadow-md hover:bg-cyan-700 disabled:bg-gray-400">Continue</button></>)}{currentStep === 2 && (<><h2 className="text-2xl font-bold text-center mb-2">Step 2: How We Protect You</h2><p className="text-center text-sm text-gray-600 dark:text-slate-300 mb-6">We use FHE to perform matching without ever decrypting your data.</p><button onClick={() => setCurrentStep(3)} className="w-full mt-6 py-3 bg-cyan-600 text-white font-semibold rounded-lg shadow-md hover:bg-cyan-700">I Understand, Create Profile</button></>)}{currentStep === 3 && (<><h2 className="text-2xl font-bold text-center mb-6">Final Step: Securing Profile</h2><div className="mt-4 space-y-3 bg-gray-50 dark:bg-slate-900/50 p-6 rounded-lg font-mono text-sm"><p className="text-gray-700 dark:text-slate-300">Simulating secure processing using N2HE-hexl encryption...</p></div><button onClick={handleEnrollment} disabled={isLoading} className="w-full mt-6 py-3 bg-green-600 text-white font-semibold rounded-lg shadow-md hover:bg-green-700 disabled:bg-gray-400">{isLoading ? 'Securing...' : 'Finalize Enrollment'}</button></>)}</div></div>);};
const Dashboard = () => { const { incidents, notifications, dismissNotification, markIncidentAsRead } = useContext(AppContext); return (<div className="relative"><Header /><NotificationToast notification={notifications.find(n => n.isNewToast)} onDismiss={dismissNotification} /><main className="p-4 md:p-8"><div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8"><div className="lg:col-span-2"><ScanningComponent /></div><div className="space-y-6"><StatCard icon={<AlertTriangle className="h-6 w-6 text-white" />} label="Total Detections" value={incidents.length} color="bg-blue-500" /><StatCard icon={<Bot className="h-6 w-6 text-white" />} label="High-Risk Deepfakes" value={incidents.filter(i=>i.deepfakeScore>90).length} color="bg-red-500" /></div></div><h3 className="text-xl font-bold text-gray-800 dark:text-white mb-6">Incident Feed</h3>{incidents.length > 0 ? (<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">{incidents.map(incident => <IncidentCard key={incident.id} incident={incident} onMarkAsRead={markIncidentAsRead} />)}</div>) : <p className="text-center text-gray-500 py-8">No incidents detected yet.</p>}</main></div>);};
const Header = () => { const { authState, logout } = useContext(AppContext); return (<header className="flex items-center justify-between p-4 bg-white dark:bg-slate-900 border-b border-gray-200 dark:border-slate-700 sticky top-0 z-40"><div className="flex items-center space-x-3"><ShieldCheck className="h-8 w-8 text-cyan-500" /><h1 className="text-xl font-bold text-gray-800 dark:text-white">HintSight.AI</h1></div><div className="flex items-center space-x-4"><Tooltip text="Your anonymous identifier"><div className="flex items-center space-x-2 bg-gray-100 dark:bg-slate-800 px-3 py-1.5 rounded-lg"><Fingerprint className="h-5 w-5 text-gray-500" /><span className="text-xs font-mono text-gray-600 dark:text-slate-300 hidden md:inline">{authState.profileId}</span></div></Tooltip><button onClick={logout} className="text-sm font-medium text-gray-600 dark:text-slate-300 hover:text-cyan-500">Log Out</button></div></header>);};
const StatCard = ({ icon, label, value, color }) => (<div className="bg-white dark:bg-slate-800 p-4 rounded-lg shadow-md flex items-start space-x-4"><div className={`p-3 rounded-full ${color}`}>{icon}</div><div><p className="text-sm text-gray-500 dark:text-slate-400">{label}</p><p className="text-2xl font-bold text-gray-800 dark:text-white mt-1">{value}</p></div></div>);
const ScanningComponent = () => (<div className="bg-white dark:bg-slate-800 p-4 rounded-lg shadow-md"><h3 className="text-lg font-bold text-gray-800 dark:text-white mb-2 flex items-center"><Cpu className="mr-2 text-cyan-500 animate-pulse"/>Live Monitoring Active</h3><p className="text-sm text-gray-500 dark:text-slate-400 mb-4">Our automated systems are continuously scanning public sources against your encrypted profile.</p><div className="bg-slate-100 dark:bg-slate-900/50 p-3 rounded-md font-mono text-xs text-green-500"><p>&gt; STATUS: MONITORING 24/7</p><p>&gt; FHE MATCHING CORE: ONLINE</p></div></div>);
const IncidentCard = ({ incident, onMarkAsRead }) => { const [isExpanded, setIsExpanded] = useState(false); const handleExpand = () => { setIsExpanded(!isExpanded); if (incident.isNew) onMarkAsRead(incident.id); }; return (<div className={`bg-white dark:bg-slate-800 rounded-xl shadow-lg overflow-hidden transition-all duration-300 ${isExpanded ? 'shadow-2xl' : 'hover:shadow-xl'} ${incident.isNew ? 'ring-2 ring-cyan-500' : ''}`}><div className="p-4"><p className="text-sm font-semibold text-gray-800 dark:text-white">Found on: {incident.sourceName}</p><p className="text-xs text-gray-500 dark:text-slate-400 mb-4">{new Date(incident.timestamp).toLocaleString()}</p><div className="space-y-3"><ScoreBar score={incident.faceMatch} label="Face Similarity" colorClass="bg-blue-500" /><ScoreBar score={incident.deepfakeScore} label="Deepfake Confidence" colorClass="bg-red-500" /></div></div><div className="bg-gray-50 dark:bg-slate-800/50 px-4 py-2 border-t border-b border-gray-200 dark:border-slate-700/50"><button onClick={handleExpand} className="w-full flex justify-between items-center text-sm font-semibold text-gray-700 dark:text-slate-200"><span>Details & Actions</span>{isExpanded ? <ChevronUp/> : <ChevronDown/>}</button></div></div>);};
const ScoreBar = ({ score, label, colorClass }) => (<div><div className="flex justify-between items-center mb-1"><span className="text-xs font-medium text-gray-600 dark:text-slate-300">{label}</span><span className={`text-xs font-bold ${score > 90 ? 'text-red-500' : 'text-gray-700 dark:text-slate-200'}`}>{score.toFixed(2)}%</span></div><div className="w-full bg-gray-200 dark:bg-slate-700 rounded-full h-2.5"><div className={`${colorClass} h-2.5 rounded-full`} style={{ width: `${score}%` }}></div></div></div>);
const NotificationToast = ({ notification, onDismiss }) => { useEffect(() => { if (notification) { const timer = setTimeout(() => onDismiss(notification.id), 5000); return () => clearTimeout(timer); } }, [notification, onDismiss]); if (!notification) return null; return ( <div className="fixed top-5 right-5 z-50 bg-white dark:bg-slate-800 shadow-2xl rounded-lg p-4 w-full max-w-sm border-l-4 border-cyan-500"> <div className="flex items-start"> <div className="flex-shrink-0 pt-0.5"><AlertTriangle className="h-6 w-6 text-cyan-500" /></div> <div className="ml-3 w-0 flex-1"><p className="text-sm font-bold text-gray-900 dark:text-white">New Deepfake Detected!</p><p className="mt-1 text-sm text-gray-600 dark:text-slate-300">A match was found on {notification.sourceName}.</p></div> <div className="ml-4 flex-shrink-0 flex"><button onClick={() => onDismiss(notification.id)} className="inline-flex text-gray-400 dark:text-gray-500 hover:text-gray-500 dark:hover:text-gray-300"><X className="h-5 w-5" /></button></div> </div> </div> );};
const Tooltip = ({ text, children }) => (<div className="relative group flex items-center">{children}<div className="absolute bottom-full mb-2 w-max max-w-xs p-2 text-sm text-white bg-slate-800 dark:bg-slate-900 rounded-md shadow-lg opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none z-50">{text}</div></div>);
const FileInput = ({ icon, label, file, onFileChange }) => (<div className="border-2 border-dashed border-gray-300 dark:border-slate-600 rounded-lg p-6 text-center">{React.cloneElement(icon, { className: "mx-auto h-10 w-10 text-gray-400" })}<label htmlFor={label} className="mt-2 text-sm font-medium text-gray-700 dark:text-slate-300 block cursor-pointer">{file ? `Selected: ${file.name}` : `Upload ${label}`}</label><input id={label} type="file" className="hidden" onChange={(e) => onFileChange(e.target.files[0])} /></div>);
